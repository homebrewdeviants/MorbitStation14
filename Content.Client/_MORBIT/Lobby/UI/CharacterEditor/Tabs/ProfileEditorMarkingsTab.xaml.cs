using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

#pragma warning disable IDE1006
namespace Content.Client._MORBIT.Lobby.UI.CharacterEditor.Tabs;
#pragma warning restore IDE1006

[GenerateTypedNameReferences]
public sealed partial class ProfileEditorMarkingsTab : BoxContainer
{
    [Dependency] private readonly MarkingManager _markingManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public Action<MarkingSet>? OnMarkingAdded;
    public Action<MarkingSet>? OnMarkingRemoved;
    public Action<MarkingSet>? OnMarkingColorChange;
    public Action<MarkingSet>? OnMarkingRankChange;

    /// <summary>
    /// The work in progress profile being edited.
    /// </summary>
    private HumanoidCharacterProfile? _profile;

    public ProfileEditorMarkingsTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Markings.OnMarkingAdded += args => { OnMarkingAdded?.Invoke(args); };
        Markings.OnMarkingRemoved += args => { OnMarkingRemoved?.Invoke(args); };
        Markings.OnMarkingColorChange += args => { OnMarkingColorChange?.Invoke(args); };
        Markings.OnMarkingRankChange += args => { OnMarkingRankChange?.Invoke(args); };
    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;
        UpdateEyePickers();
        UpdateMarkings();
        UpdateHair();
        UpdateFacialHair();
    }

    public void SetSkinColor(Color skinColor)
    {
        Markings.SetSkinColor(skinColor);
    }

    public void SetEyeColor(Color skinColor)
    {
        Markings.SetEyeColor(skinColor);
    }

    public void SetSpecies(string species)
    {
        Markings.SetSpecies(species);
    }

    public void SetSex(Sex sex)
    {
        Markings.SetSex(sex);
    }

    public void UpdateHair()
    {
        if (_profile == null)
            return;

        Color? hairColor = null;
        if (_profile.Appearance.HairStyleId != HairStyles.DefaultHairStyle &&
            _markingManager.Markings.TryGetValue(_profile.Appearance.HairStyleId, out var hairProto))
        {
            if (_markingManager.CanBeApplied(_profile.Species, _profile.Sex, hairProto, _prototypeManager))
            {
                var mustMatchSkin = _markingManager.MustMatchSkin(_profile.Species,
                    HumanoidVisualLayers.Hair,
                    out var _,
                    _prototypeManager);

                hairColor = mustMatchSkin ? _profile.Appearance.SkinColor : _profile.Appearance.HairColor;
            }
        }

        if (hairColor != null)
        {
            var hairId = _profile.Appearance.HairStyleId;
            var colors = new List<Color>() { hairColor.Value };
            Markings.HairMarking = new(hairId, colors);
        }
        else
            Markings.HairMarking = null;
    }

    public void UpdateFacialHair()
    {
        if (_profile == null)
            return;

        Color? facialHairColor = null;
        if (_profile.Appearance.FacialHairStyleId != HairStyles.DefaultFacialHairStyle &&
            _markingManager.Markings.TryGetValue(_profile.Appearance.FacialHairStyleId, out var facialHairProto))
        {
            if (_markingManager.CanBeApplied(_profile.Species, _profile.Sex, facialHairProto, _prototypeManager))
            {
                var mustMatchSkin = _markingManager.MustMatchSkin(_profile.Species,
                    HumanoidVisualLayers.Hair,
                    out var _,
                    _prototypeManager);

                facialHairColor = mustMatchSkin ? _profile.Appearance.SkinColor : _profile.Appearance.FacialHairColor;
            }
        }

        if (facialHairColor != null)
        {
            var facialHairId = _profile.Appearance.FacialHairStyleId;
            var colors = new List<Color>() { facialHairColor.Value };
            Markings.FacialHairMarking = new(facialHairId, colors);
        }
        else
            Markings.FacialHairMarking = null;
    }

    private void UpdateMarkings()
    {
        if (_profile == null)
            return;

        Markings.SetData(_profile.Appearance.Markings,
            _profile.Species,
            _profile.Sex,
            _profile.Appearance.SkinColor,
            _profile.Appearance.EyeColor);
    }

    private void UpdateEyePickers()
    {
        if (_profile == null)
            return;

        Markings.CurrentEyeColor = _profile.Appearance.EyeColor;
    }
}
