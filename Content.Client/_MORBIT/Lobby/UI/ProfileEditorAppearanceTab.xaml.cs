using System.Linq;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared.Guidebook;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;
using Robust.Shared.Prototypes;

#pragma warning disable IDE1006
namespace Content.Client._MORBIT.Lobby.UI;
#pragma warning restore IDE1006

[GenerateTypedNameReferences]
public sealed partial class ProfileEditorAppearanceTab : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly MarkingManager _markingManager = default!;

    public event Action<bool>? OnShowClothes;
    public event Action<HumanoidCharacterProfile>? OnProfileUpdated;
    public event Action<HumanoidCharacterProfile>? OnSkinColorUpdated;
    public event Action<HumanoidCharacterProfile>? OnEyeColorUpdated;
    public event Action<HumanoidCharacterProfile>? OnHairUpdated;
    public event Action<HumanoidCharacterProfile>? OnFacialHairUpdated;
    public event Action<HumanoidCharacterProfile>? OnSpeciesUpdated;
    public event Action<HumanoidCharacterProfile>? OnSexUpdated;
    public event Action<HumanoidCharacterProfile>? OnDirtyUpdated;

    /// <summary>
    /// The work in progress profile being edited.
    /// </summary>
    private HumanoidCharacterProfile? _profile;

    private ColorSelectorSliders _rgbSkinColorSelector;

    private List<SpeciesPrototype> _species = new();

    private static readonly ProtoId<GuideEntryPrototype> DefaultSpeciesGuidebook = "Species";

    public ProfileEditorAppearanceTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SexButton.OnItemSelected += args =>
        {
            SexButton.SelectId(args.Id);
            SetSex((Sex)args.Id);
        };

        AgeEdit.OnTextChanged += args =>
        {
            if (!int.TryParse(args.Text, out var newAge))
                return;

            SetAge(newAge);
        };

        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-male-text"), (int)Gender.Male);
        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-female-text"), (int)Gender.Female);
        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-epicene-text"), (int)Gender.Epicene);
        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-neuter-text"), (int)Gender.Neuter);

        PronounsButton.OnItemSelected += args =>
        {
            PronounsButton.SelectId(args.Id);
            SetGender((Gender)args.Id);
        };

        RefreshSpecies();

        SpeciesButton.OnItemSelected += args =>
        {
            SpeciesButton.SelectId(args.Id);
            SetSpecies(_species[args.Id].ID);
            UpdateHairPickers();
            OnSkinColorOnValueChanged();
        };

        foreach (var value in Enum.GetValues<SpawnPriorityPreference>())
        {
            SpawnPriorityButton.AddItem(Loc.GetString($"humanoid-profile-editor-preference-spawn-priority-{value.ToString().ToLower()}"), (int)value);
        }

        SpawnPriorityButton.OnItemSelected += args =>
        {
            SpawnPriorityButton.SelectId(args.Id);
            SetSpawnPriority((SpawnPriorityPreference)args.Id);
        };

        ShowClothes.OnToggled += args => { OnShowClothes?.Invoke(args.Pressed); };
        SpeciesInfoButton.OnPressed += OnSpeciesInfoButtonPressed;

        Skin.OnValueChanged += _ =>
        {
            OnSkinColorOnValueChanged();
        };

        RgbSkinColorContainer.AddChild(_rgbSkinColorSelector = new ColorSelectorSliders());
        _rgbSkinColorSelector.SelectorType = ColorSelectorSliders.ColorSelectorType.Hsv;
        _rgbSkinColorSelector.OnColorChanged += _ =>
        {
            OnSkinColorOnValueChanged();
        };

        HairStylePicker.OnMarkingSelect += newStyle =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(
                _profile.Appearance.WithHairStyleName(newStyle.id));

            OnProfileUpdated?.Invoke(_profile);
        };

        HairStylePicker.OnColorChanged += newColor =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(_profile.Appearance
                .WithHairColor(newColor.marking.MarkingColors[0]));

            OnProfileUpdated?.Invoke(_profile);
        };

        FacialHairPicker.OnMarkingSelect += newStyle =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(
                _profile.Appearance.WithFacialHairStyleName(newStyle.id));

            OnProfileUpdated?.Invoke(_profile);
        };

        FacialHairPicker.OnColorChanged += newColor =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(
                _profile.Appearance.WithFacialHairColor(newColor.marking.MarkingColors[0]));

            OnFacialHairUpdated?.Invoke(_profile);
        };

        HairStylePicker.OnSlotRemove += _ =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(
                _profile.Appearance.WithHairStyleName(HairStyles.DefaultHairStyle)
            );

            UpdateHairPickers();
            OnHairUpdated?.Invoke(_profile);
        };

        FacialHairPicker.OnSlotRemove += _ =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(_profile.Appearance
                .WithFacialHairStyleName(HairStyles.DefaultFacialHairStyle));
            UpdateHairPickers();
            OnFacialHairUpdated?.Invoke(_profile);
        };

        HairStylePicker.OnSlotAdd += delegate ()
        {
            if (_profile is null)
                return;

            var hair = _markingManager
                .MarkingsByCategoryAndSpecies(MarkingCategories.Hair, _profile.Species).Keys
                .FirstOrDefault();

            if (string.IsNullOrEmpty(hair))
                return;

            _profile = _profile.WithCharacterAppearance(_profile.Appearance.WithHairStyleName(hair));
            UpdateHairPickers();
            OnHairUpdated?.Invoke(_profile);
        };

        FacialHairPicker.OnSlotAdd += delegate ()
        {
            if (_profile is null)
                return;

            var hair = _markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.FacialHair, _profile.Species).Keys
                .FirstOrDefault();

            if (string.IsNullOrEmpty(hair))
                return;

            _profile = _profile.WithCharacterAppearance(_profile.Appearance.WithFacialHairStyleName(hair));
            UpdateHairPickers();
            OnFacialHairUpdated?.Invoke(_profile);
        };

        EyeColorPicker.OnEyeColorPicked += newColor =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(_profile.Appearance.WithEyeColor(newColor));
            OnEyeColorUpdated?.Invoke(_profile);
        };

        UpdateSpeciesGuidebookIcon();
    }

    private void OnSkinColorOnValueChanged()
    {
        if (_profile is null)
            return;

        var skin = _prototypeManager.Index(_profile.Species).SkinColoration;
        var color = Color.White;

        switch (skin)
        {
            case HumanoidSkinColor.HumanToned:
                {
                    if (!Skin.Visible)
                    {
                        Skin.Visible = true;
                        RgbSkinColorContainer.Visible = false;
                    }

                    color = SkinColor.HumanSkinTone((int)Skin.Value);
                    break;
                }
            case HumanoidSkinColor.Hues:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    color = _rgbSkinColorSelector.Color;
                    break;
                }
            case HumanoidSkinColor.TintedHues:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    color = SkinColor.TintedHues(_rgbSkinColorSelector.Color);
                    break;
                }
            case HumanoidSkinColor.VoxFeathers:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    color = SkinColor.ClosestVoxColor(_rgbSkinColorSelector.Color);
                    break;
                }
        }

        _profile = _profile.WithCharacterAppearance(_profile.Appearance.WithSkinColor(color));
        OnSkinColorUpdated?.Invoke(_profile);
    }

    private void OnSpeciesInfoButtonPressed(BaseButton.ButtonEventArgs args)
    {
        // TODO GUIDEBOOK
        // make the species guide book a field on the species prototype.
        // I.e., do what jobs/antags do.

        var guidebookController = UserInterfaceManager.GetUIController<GuidebookUIController>();
        var species = _profile?.Species ?? SharedHumanoidAppearanceSystem.DefaultSpecies;
        var page = DefaultSpeciesGuidebook;
        if (_prototypeManager.HasIndex<GuideEntryPrototype>(species))
            page = new ProtoId<GuideEntryPrototype>(species.Id); // Gross. See above todo comment.

        if (_prototypeManager.TryIndex(DefaultSpeciesGuidebook, out var guideRoot))
        {
            var dict = new Dictionary<ProtoId<GuideEntryPrototype>, GuideEntry>();
            dict.Add(DefaultSpeciesGuidebook, guideRoot);
            //TODO: Don't close the guidebook if its already open, just go to the correct page
            guidebookController.OpenGuidebook(dict, includeChildren: true, selected: page);
        }
    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;
        UpdateControls();
    }

    private void UpdateControls()
    {
        UpdateSexControls();
        UpdateGenderControls();
        UpdateSkinColor();
        UpdateSpawnPriorityControls();
        UpdateAgeEdit();
        UpdateEyePickers();
        UpdateHairPickers();
        RefreshSpecies();
    }

    private void UpdateAgeEdit()
    {
        AgeEdit.Text = _profile?.Age.ToString() ?? "";
    }

    private void UpdateSexControls()
    {
        if (_profile == null)
            return;

        SexButton.Clear();

        var sexes = new List<Sex>();

        // add species sex options, default to just none if we are in bizzaro world and have no species
        if (_prototypeManager.TryIndex<SpeciesPrototype>(_profile.Species, out var speciesProto))
        {
            foreach (var sex in speciesProto.Sexes)
            {
                sexes.Add(sex);
            }
        }
        else
        {
            sexes.Add(Sex.Unsexed);
        }

        // add button for each sex
        foreach (var sex in sexes)
        {
            SexButton.AddItem(Loc.GetString($"humanoid-profile-editor-sex-{sex.ToString().ToLower()}-text"), (int)sex);
        }

        if (sexes.Contains(_profile.Sex))
            SexButton.SelectId((int)_profile.Sex);
        else
            SexButton.SelectId((int)sexes[0]);
    }

    private void UpdateSkinColor()
    {
        if (_profile == null)
            return;

        var skin = _prototypeManager.Index<SpeciesPrototype>(_profile.Species).SkinColoration;

        switch (skin)
        {
            case HumanoidSkinColor.HumanToned:
                {
                    if (!Skin.Visible)
                    {
                        Skin.Visible = true;
                        RgbSkinColorContainer.Visible = false;
                    }

                    Skin.Value = SkinColor.HumanSkinToneFromColor(_profile.Appearance.SkinColor);

                    break;
                }
            case HumanoidSkinColor.Hues:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    // set the RGB values to the direct values otherwise
                    _rgbSkinColorSelector.Color = _profile.Appearance.SkinColor;
                    break;
                }
            case HumanoidSkinColor.TintedHues:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    // set the RGB values to the direct values otherwise
                    _rgbSkinColorSelector.Color = _profile.Appearance.SkinColor;
                    break;
                }
            case HumanoidSkinColor.VoxFeathers:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    _rgbSkinColorSelector.Color = SkinColor.ClosestVoxColor(_profile.Appearance.SkinColor);

                    break;
                }
        }
    }

    public void UpdateSpeciesGuidebookIcon()
    {
        SpeciesInfoButton.StyleClasses.Clear();

        var species = _profile?.Species;
        if (species is null)
            return;

        if (!_prototypeManager.TryIndex<SpeciesPrototype>(species, out var speciesProto))
            return;

        // Don't display the info button if no guide entry is found
        if (!_prototypeManager.HasIndex<GuideEntryPrototype>(species))
            return;

        const string style = "SpeciesInfoDefault";
        SpeciesInfoButton.StyleClasses.Add(style);
    }

    private void UpdateGenderControls()
    {
        if (_profile == null)
        {
            return;
        }

        PronounsButton.SelectId((int)_profile.Gender);
    }

    private void UpdateSpawnPriorityControls()
    {
        if (_profile == null)
        {
            return;
        }

        SpawnPriorityButton.SelectId((int)_profile.SpawnPriority);
    }

    private void UpdateHairPickers()
    {
        if (_profile == null)
            return;

        var hairMarking = _profile.Appearance.HairStyleId == HairStyles.DefaultHairStyle
            ? new List<Marking>()
            : new() { new(_profile.Appearance.HairStyleId, new List<Color>() { _profile.Appearance.HairColor }) };

        var facialHairMarking = _profile.Appearance.FacialHairStyleId == HairStyles.DefaultFacialHairStyle
            ? new List<Marking>()
            : new() { new(_profile.Appearance.FacialHairStyleId, new List<Color>() { _profile.Appearance.FacialHairColor }) };

        HairStylePicker.UpdateData(
            hairMarking,
            _profile.Species,
            1);
        FacialHairPicker.UpdateData(
            facialHairMarking,
            _profile.Species,
            1);
    }

    private void UpdateEyePickers()
    {
        if (_profile == null)
            return;

        EyeColorPicker.SetData(_profile.Appearance.EyeColor);
    }

    /// <summary>
    /// Refreshes the species selector.
    /// </summary>
    public void RefreshSpecies()
    {
        SpeciesButton.Clear();
        _species.Clear();

        _species.AddRange(_prototypeManager.EnumeratePrototypes<SpeciesPrototype>().Where(o => o.RoundStart));
        var speciesIds = _species.Select(o => o.ID).ToList();

        for (var i = 0; i < _species.Count; i++)
        {
            var name = Loc.GetString(_species[i].Name);
            SpeciesButton.AddItem(name, i);

            if (_profile?.Species.Equals(_species[i].ID) == true)
            {
                SpeciesButton.SelectId(i);
            }
        }

        // If our species isn't available then reset it to default.
        if (_profile != null)
        {
            if (!speciesIds.Contains(_profile.Species))
            {
                SetSpecies(SharedHumanoidAppearanceSystem.DefaultSpecies);
            }
        }
    }

    private void SetSpecies(string newSpecies)
    {
        if (_profile is null)
            return;

        _profile = _profile.WithSpecies(newSpecies);
        OnSkinColorOnValueChanged();
        UpdateSexControls();
        UpdateSpeciesGuidebookIcon();
        OnSpeciesUpdated?.Invoke(_profile);
    }

    private void SetAge(int newAge)
    {
        if (_profile is null)
            return;

        _profile = _profile.WithAge(newAge);
        OnProfileUpdated?.Invoke(_profile);
    }

    private void SetSex(Sex newSex)
    {
        if (_profile is null)
            return;

        _profile = _profile.WithSex(newSex);
        // for convenience, default to most common gender when new sex is selected
        switch (newSex)
        {
            case Sex.Male:
                _profile = _profile.WithGender(Gender.Male);
                break;
            case Sex.Female:
                _profile = _profile.WithGender(Gender.Female);
                break;
            default:
                _profile = _profile.WithGender(Gender.Epicene);
                break;
        }

        UpdateGenderControls();
        OnSexUpdated?.Invoke(_profile);
    }

    private void SetGender(Gender newGender)
    {
        if (_profile is null)
            return;

        _profile = _profile.WithGender(newGender);
        OnProfileUpdated?.Invoke(_profile);
    }

    private void SetSpawnPriority(SpawnPriorityPreference newSpawnPriority)
    {
        if (_profile is null)
            return;

        _profile = _profile.WithSpawnPriorityPreference(newSpawnPriority);
        OnDirtyUpdated?.Invoke(_profile);
    }
}
