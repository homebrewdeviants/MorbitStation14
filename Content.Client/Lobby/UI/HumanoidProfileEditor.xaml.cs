using System.Linq;
using Content.Client.Message;
using Content.Client.Sprite;
using Content.Shared.CCVar;
using Content.Shared.Guidebook;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Lobby.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class HumanoidProfileEditor : BoxContainer
    {
        private readonly IClientPreferencesManager _preferencesManager;
        private readonly IConfigurationManager _cfgManager;
        private readonly IEntityManager _entManager;
        private readonly IPrototypeManager _prototypeManager;
        private readonly MarkingManager _markingManager;

        // CCvar.
        private int _maxNameLength;
        private bool _allowFlavorText;

        private FlavorText.FlavorText? _flavorText;
        private TextEdit? _flavorTextEdit;

        private bool _imaging;

        /// <summary>
        /// If we're attempting to save.
        /// </summary>
        public event Action? Save;

        /// <summary>
        /// The character slot for the current profile.
        /// </summary>
        public int? CharacterSlot;

        /// <summary>
        /// The work in progress profile being edited.
        /// </summary>
        public HumanoidCharacterProfile? Profile;

        public event Action<List<ProtoId<GuideEntryPrototype>>>? OnOpenGuidebook;

        public bool IsDirty => ProfileButtons.IsDirty;

        public HumanoidProfileEditor(
            IClientPreferencesManager preferencesManager,
            IConfigurationManager configurationManager,
            IEntityManager entManager,
            IPrototypeManager prototypeManager,
            MarkingManager markings)
        {
            RobustXamlLoader.Load(this);
            _cfgManager = configurationManager;
            _entManager = entManager;
            _prototypeManager = prototypeManager;
            _markingManager = markings;
            _preferencesManager = preferencesManager;

            _maxNameLength = _cfgManager.GetCVar(CCVars.MaxNameLength);
            _allowFlavorText = _cfgManager.GetCVar(CCVars.FlavorText);

            // NAME / RANDOMIZE BUTTONS

            NameEdit.OnTextChanged += args => { SetName(args.Text); };
            NameEdit.IsValid = args => args.Length <= _maxNameLength;
            NameRandomize.OnPressed += args => RandomizeName();
            RandomizeEverythingButton.OnPressed += args => { RandomizeEverything(); };
            WarningLabel.SetMarkup($"[color=red]{Loc.GetString("humanoid-profile-editor-naming-rules-warning")}[/color]");

            // PROFILE BUTTONS

            ProfileButtons.OnReset += () =>
            {
                var selectedCharacter = _preferencesManager.Preferences?.SelectedCharacter;
                var selectedIndex = _preferencesManager.Preferences?.SelectedCharacterIndex;
                SetProfile((HumanoidCharacterProfile?)selectedCharacter, selectedIndex);
            };

            ProfileButtons.OnSaved += () => { Save?.Invoke(); };
            ProfileButtons.OnProfileImported += ImportProfile;
            ProfileButtons.OnExportImage += ExportImage;

            // APPEARANCE TAB

            TabContainer.SetTabTitle(0, Loc.GetString("humanoid-profile-editor-appearance-tab"));
            AppearanceTab.OnShowClothes += show =>
            {
                CharacterPreview.ShowClothes = show;
                ReloadPreview();
            };

            AppearanceTab.OnProfileUpdated += profile =>
            {
                Profile = profile;
                ReloadPreview();
            };

            AppearanceTab.OnSkinColorUpdated += profile =>
            {
                Profile = profile;
                MarkingsTab.SetSkinColor(profile.Appearance.SkinColor);
                ReloadProfilePreview();
            };

            AppearanceTab.OnEyeColorUpdated += profile =>
            {
                Profile = profile;
                MarkingsTab.SetEyeColor(Profile.Appearance.EyeColor);
                ReloadProfilePreview();
            };

            AppearanceTab.OnHairUpdated += profile =>
            {
                Profile = profile;
                MarkingsTab.UpdateHair();
                ReloadProfilePreview();
            };

            AppearanceTab.OnFacialHairUpdated += profile =>
            {
                Profile = profile;
                MarkingsTab.UpdateFacialHair();
                ReloadProfilePreview();
            };

            AppearanceTab.OnSpeciesUpdated += profile =>
            {
                Profile = profile;
                MarkingsTab.SetSpecies(profile.Species);
                RefreshJobs();
                RefreshLoadouts();
                ReloadPreview();
            };

            AppearanceTab.OnSexUpdated += profile =>
            {
                Profile = profile;
                MarkingsTab.SetSex(profile.Sex);
                ReloadPreview();
            };

            AppearanceTab.OnDirtyUpdated += profile =>
            {
                Profile = profile;
                SetDirty();
            };

            // JOBS TAB

            TabContainer.SetTabTitle(1, Loc.GetString("humanoid-profile-editor-jobs-tab"));

            JobsTab.OnProfileUpdated += profile =>
            {
                Profile = profile;
                SetDirty();
            };

            JobsTab.OnJobUpdated += profile =>
            {
                Profile = profile;
                ReloadPreview();
                SetDirty();
            };

            JobsTab.OnJobOverride += job =>
            {
                CharacterPreview.JobOverride = job;
                ReloadPreview();
            };

            JobsTab.OnOpenGuidebook += args => { OnOpenGuidebook?.Invoke(args); };

            RefreshJobs();

            // ANTAGS TAB

            TabContainer.SetTabTitle(2, Loc.GetString("humanoid-profile-editor-antags-tab"));

            AntagsTab.OnAntagsUpdated += profile =>
            {
                Profile = profile;
                SetDirty();
            };

            AntagsTab.OnOpenGuidebook += args => { OnOpenGuidebook?.Invoke(args); };

            RefreshAntags();

            // TRAITS TAB

            TabContainer.SetTabTitle(3, Loc.GetString("humanoid-profile-editor-traits-tab"));

            TraitsTab.OnTraitSelected += profile =>
            {
                Profile = profile;
                SetDirty();
            };

            RefreshTraits();

            // MARKINGS TAB

            TabContainer.SetTabTitle(4, Loc.GetString("humanoid-profile-editor-markings-tab"));

            MarkingsTab.OnMarkingAdded += OnMarkingChange;
            MarkingsTab.OnMarkingRemoved += OnMarkingChange;
            MarkingsTab.OnMarkingColorChange += OnMarkingChange;
            MarkingsTab.OnMarkingRankChange += OnMarkingChange;

            // FLAVOR TEXT TAB

            RefreshFlavorText();

        }

        /// <summary>
        /// Refreshes the flavor text editor status.
        /// </summary>
        public void RefreshFlavorText()
        {
            if (_allowFlavorText)
            {
                if (_flavorText != null)
                    return;

                _flavorText = new FlavorText.FlavorText();
                TabContainer.AddChild(_flavorText);
                TabContainer.SetTabTitle(TabContainer.ChildCount - 1, Loc.GetString("humanoid-profile-editor-flavortext-tab"));
                _flavorTextEdit = _flavorText.CFlavorTextInput;

                _flavorText.OnFlavorTextChanged += OnFlavorTextChange;
            }
            else
            {
                if (_flavorText == null)
                    return;

                TabContainer.RemoveChild(_flavorText);
                _flavorText.OnFlavorTextChanged -= OnFlavorTextChange;
                _flavorTextEdit = null;
                _flavorText = null;
            }
        }

        public void RefreshTraits()
        {
            TraitsTab.RefreshTraits();
        }

        public void RefreshSpecies()
        {
            AppearanceTab.RefreshSpecies();
        }

        public void RefreshAntags()
        {
            AntagsTab.RefreshAntags();
        }

        private void SetDirty()
        {
            // If it equals default then reset the button.
            if (Profile == null || _preferencesManager.Preferences?.SelectedCharacter.MemberwiseEquals(Profile) == true)
            {
                ProfileButtons.IsDirty = false;
                return;
            }

            // TODO: Check if profile matches default.
            ProfileButtons.IsDirty = true;
        }

        /// <summary>
        /// Refresh all loadouts.
        /// </summary>
        public void RefreshLoadouts()
        {
            JobsTab.RefreshLoadouts();
        }

        /// <summary>
        /// Refreshes all job selectors.
        /// </summary>
        public void RefreshJobs()
        {
            JobsTab.RefreshJobs();
        }

        /// <summary>
        /// Reloads the entire dummy entity for preview.
        /// </summary>
        /// <remarks>
        /// This is expensive so not recommended to run if you have a slider.
        /// </remarks>
        private void ReloadPreview()
        {
            CharacterPreview.SetProfile(Profile);
            CharacterPreview.ReloadPreview();
            SetDirty();
        }

        /// <summary>
        /// Resets the profile to the defaults.
        /// </summary>
        public void ResetToDefault()
        {
            SetProfile(
                (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter,
                _preferencesManager.Preferences?.SelectedCharacterIndex);
        }

        /// <summary>
        /// Sets the editor to the specified profile with the specified slot.
        /// </summary>
        public void SetProfile(HumanoidCharacterProfile? profile, int? slot)
        {
            Profile = profile?.Clone();
            CharacterSlot = slot;

            CharacterPreview.JobOverride = null;
            ProfileButtons.SetProfile(Profile);
            AppearanceTab.SetProfile(Profile);
            JobsTab.SetProfile(Profile);
            AntagsTab.SetProfile(Profile);
            TraitsTab.SetProfile(Profile);
            MarkingsTab.SetProfile(Profile);
            ProfileButtons.IsDirty = false;

            UpdateNameEdit();
            UpdateFlavorTextEdit();

            RefreshFlavorText();
            ReloadPreview();
        }

        /// <summary>
        /// A slim reload that only updates the entity itself and not any of the job entities, etc.
        /// </summary>
        private void ReloadProfilePreview()
        {
            CharacterPreview.SetProfile(Profile);
            CharacterPreview.ReloadProfilePreview();
            SetDirty();
        }

        private void OnFlavorTextChange(string content)
        {
            if (Profile is null)
                return;

            Profile = Profile.WithFlavorText(content);
            SetDirty();
        }

        private void OnMarkingChange(MarkingSet markings)
        {
            if (Profile is null)
                return;

            var appearance = Profile.Appearance.WithMarkings(markings.GetForwardEnumerator().ToList());
            Profile = Profile.WithCharacterAppearance(appearance);
            ReloadProfilePreview();
        }

        protected override void EnteredTree()
        {
            base.EnteredTree();
            ReloadPreview();
        }

        private void SetName(string newName)
        {
            Profile = Profile?.WithName(newName);
            SetDirty();

            if (ProfileButtons.IsDirty)
                CharacterPreview.SetName(newName);
        }

        private void UpdateNameEdit()
        {
            NameEdit.Text = Profile?.Name ?? "";
        }

        private void UpdateFlavorTextEdit()
        {
            if (_flavorTextEdit != null)
            {
                _flavorTextEdit.TextRope = new Rope.Leaf(Profile?.FlavorText ?? "");
            }
        }

        private void RandomizeEverything()
        {
            Profile = HumanoidCharacterProfile.Random();
            SetProfile(Profile, CharacterSlot);
            SetDirty();
        }

        private void RandomizeName()
        {
            if (Profile == null) return;
            var name = HumanoidCharacterProfile.GetName(Profile.Species, Profile.Gender);
            SetName(name);
            UpdateNameEdit();
        }

        private void ImportProfile(HumanoidCharacterProfile profile)
        {
            if (CharacterSlot is null)
                return;

            var oldProfile = Profile;
            SetProfile(profile, CharacterSlot);

            if (oldProfile is not null)
                ProfileButtons.IsDirty = !profile.MemberwiseEquals(oldProfile);
        }

        private async void ExportImage()
        {
            if (_imaging)
                return;

            var dir = CharacterPreview.PreviewRotation;

            _imaging = true;
            await _entManager.System<ContentSpriteSystem>().Export(entity: CharacterPreview.PreviewDummy,
                direction: dir,
                includeId: false);

            _imaging = false;
        }
    }
}
